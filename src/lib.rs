#![doc = "Peripheral access API for K1921VK035 microcontrollers (generated using svd2rust v0.33.1 (untracked))\n\nYou can find an overview of the generated API [here].\n\nAPI features to be included in the [next]
svd2rust release can be generated by cloning the svd2rust [repository], checking out the above commit, and running `cargo doc --open`.\n\n[here]: https://docs.rs/svd2rust/0.33.1/svd2rust/#peripheral-api\n[next]: https://github.com/rust-embedded/svd2rust/blob/master/CHANGELOG.md#unreleased\n[repository]: https://github.com/rust-embedded/svd2rust"]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![no_std]
use core::marker::PhantomData;
use core::ops::Deref;
#[doc = r"Number available in the NVIC for configuring priority"]
pub const NVIC_PRIO_BITS: u8 = 3;
#[cfg(feature = "rt")]
pub use self::Interrupt as interrupt;
#[cfg(feature = "rt")]
pub use cortex_m_rt::interrupt;
#[allow(unused_imports)]
use generic::*;
#[doc = r"Common register and bit access and modify traits"]
pub mod generic;
#[cfg(feature = "rt")]
extern "C" {
    fn WDT();
    fn RCU();
    fn MFLASH();
    fn GPIOA();
    fn GPIOB();
    fn DMA_CH0();
    fn DMA_CH1();
    fn DMA_CH2();
    fn DMA_CH3();
    fn DMA_CH4();
    fn DMA_CH5();
    fn DMA_CH6();
    fn DMA_CH7();
    fn DMA_CH8();
    fn DMA_CH9();
    fn DMA_CH10();
    fn DMA_CH11();
    fn DMA_CH12();
    fn DMA_CH13();
    fn DMA_CH14();
    fn DMA_CH15();
    fn TMR0();
    fn TMR1();
    fn TMR2();
    fn TMR3();
    fn UART0_TD();
    fn UART0_RX();
    fn UART0_TX();
    fn UART0_E_RT();
    fn UART1_TD();
    fn UART1_RX();
    fn UART1_TX();
    fn UART1_E_RT();
    fn SPI_RO_RT();
    fn SPI_RX();
    fn SPI_TX();
    fn I2C();
    fn ECAP0();
    fn ECAP1();
    fn ECAP2();
    fn PWM0();
    fn PWM0_HD();
    fn PWM0_TZ();
    fn PWM1();
    fn PWM1_HD();
    fn PWM1_TZ();
    fn PWM2();
    fn PWM2_HD();
    fn PWM2_TZ();
    fn QEP();
    fn ADC_SEQ0();
    fn ADC_SEQ1();
    fn ADC_DC();
    fn CAN0();
    fn CAN1();
    fn CAN2();
    fn CAN3();
    fn CAN4();
    fn CAN5();
    fn CAN6();
    fn CAN7();
    fn CAN8();
    fn CAN9();
    fn CAN10();
    fn CAN11();
    fn CAN12();
    fn CAN13();
    fn CAN14();
    fn CAN15();
    fn FPU();
}
#[doc(hidden)]
#[repr(C)]
pub union Vector {
    _handler: unsafe extern "C" fn(),
    _reserved: u32,
}
#[cfg(feature = "rt")]
#[doc(hidden)]
#[link_section = ".vector_table.interrupts"]
#[no_mangle]
pub static __INTERRUPTS: [Vector; 70] = [
    Vector { _handler: WDT },
    Vector { _handler: RCU },
    Vector { _handler: MFLASH },
    Vector { _handler: GPIOA },
    Vector { _handler: GPIOB },
    Vector { _handler: DMA_CH0 },
    Vector { _handler: DMA_CH1 },
    Vector { _handler: DMA_CH2 },
    Vector { _handler: DMA_CH3 },
    Vector { _handler: DMA_CH4 },
    Vector { _handler: DMA_CH5 },
    Vector { _handler: DMA_CH6 },
    Vector { _handler: DMA_CH7 },
    Vector { _handler: DMA_CH8 },
    Vector { _handler: DMA_CH9 },
    Vector { _handler: DMA_CH10 },
    Vector { _handler: DMA_CH11 },
    Vector { _handler: DMA_CH12 },
    Vector { _handler: DMA_CH13 },
    Vector { _handler: DMA_CH14 },
    Vector { _handler: DMA_CH15 },
    Vector { _handler: TMR0 },
    Vector { _handler: TMR1 },
    Vector { _handler: TMR2 },
    Vector { _handler: TMR3 },
    Vector { _handler: UART0_TD },
    Vector { _handler: UART0_RX },
    Vector { _handler: UART0_TX },
    Vector {
        _handler: UART0_E_RT,
    },
    Vector { _handler: UART1_TD },
    Vector { _handler: UART1_RX },
    Vector { _handler: UART1_TX },
    Vector {
        _handler: UART1_E_RT,
    },
    Vector {
        _handler: SPI_RO_RT,
    },
    Vector { _handler: SPI_RX },
    Vector { _handler: SPI_TX },
    Vector { _handler: I2C },
    Vector { _handler: ECAP0 },
    Vector { _handler: ECAP1 },
    Vector { _handler: ECAP2 },
    Vector { _handler: PWM0 },
    Vector { _handler: PWM0_HD },
    Vector { _handler: PWM0_TZ },
    Vector { _handler: PWM1 },
    Vector { _handler: PWM1_HD },
    Vector { _handler: PWM1_TZ },
    Vector { _handler: PWM2 },
    Vector { _handler: PWM2_HD },
    Vector { _handler: PWM2_TZ },
    Vector { _handler: QEP },
    Vector { _handler: ADC_SEQ0 },
    Vector { _handler: ADC_SEQ1 },
    Vector { _handler: ADC_DC },
    Vector { _handler: CAN0 },
    Vector { _handler: CAN1 },
    Vector { _handler: CAN2 },
    Vector { _handler: CAN3 },
    Vector { _handler: CAN4 },
    Vector { _handler: CAN5 },
    Vector { _handler: CAN6 },
    Vector { _handler: CAN7 },
    Vector { _handler: CAN8 },
    Vector { _handler: CAN9 },
    Vector { _handler: CAN10 },
    Vector { _handler: CAN11 },
    Vector { _handler: CAN12 },
    Vector { _handler: CAN13 },
    Vector { _handler: CAN14 },
    Vector { _handler: CAN15 },
    Vector { _handler: FPU },
];
#[doc = r"Enumeration of all the interrupts."]
#[derive(Copy, Clone, Debug, PartialEq, Eq)]
#[repr(u16)]
pub enum Interrupt {
    #[doc = "0 - Watchdog timer interrupt"]
    WDT = 0,
    #[doc = "1 - Reset and clock unit interrupt"]
    RCU = 1,
    #[doc = "2 - MFLASH interrupt"]
    MFLASH = 2,
    #[doc = "3 - GPIO A interrupt"]
    GPIOA = 3,
    #[doc = "4 - GPIO B interrupt"]
    GPIOB = 4,
    #[doc = "5 - DMA channel 0 interrupt"]
    DMA_CH0 = 5,
    #[doc = "6 - DMA channel 1 interrupt"]
    DMA_CH1 = 6,
    #[doc = "7 - DMA channel 2 interrupt"]
    DMA_CH2 = 7,
    #[doc = "8 - DMA channel 3 interrupt"]
    DMA_CH3 = 8,
    #[doc = "9 - DMA channel 4 interrupt"]
    DMA_CH4 = 9,
    #[doc = "10 - DMA channel 5 interrupt"]
    DMA_CH5 = 10,
    #[doc = "11 - DMA channel 6 interrupt"]
    DMA_CH6 = 11,
    #[doc = "12 - DMA channel 7 interrupt"]
    DMA_CH7 = 12,
    #[doc = "13 - DMA channel 8 interrupt"]
    DMA_CH8 = 13,
    #[doc = "14 - DMA channel 9 interrupt"]
    DMA_CH9 = 14,
    #[doc = "15 - DMA channel 10 interrupt"]
    DMA_CH10 = 15,
    #[doc = "16 - DMA channel 11 interrupt"]
    DMA_CH11 = 16,
    #[doc = "17 - DMA channel 12 interrupt"]
    DMA_CH12 = 17,
    #[doc = "18 - DMA channel 13 interrupt"]
    DMA_CH13 = 18,
    #[doc = "19 - DMA channel 14 interrupt"]
    DMA_CH14 = 19,
    #[doc = "20 - DMA channel 15 interrupt"]
    DMA_CH15 = 20,
    #[doc = "21 - Timer 0 interrupt"]
    TMR0 = 21,
    #[doc = "22 - Timer 1 interrupt"]
    TMR1 = 22,
    #[doc = "23 - Timer 2 interrupt"]
    TMR2 = 23,
    #[doc = "24 - Timer 3 interrupt"]
    TMR3 = 24,
    #[doc = "25 - UART0 Transmit Done interrupt"]
    UART0_TD = 25,
    #[doc = "26 - UART0 Recieve interrupt"]
    UART0_RX = 26,
    #[doc = "27 - UART0 Transmit interrupt"]
    UART0_TX = 27,
    #[doc = "28 - UART0 Error and Receive Timeout interrupt"]
    UART0_E_RT = 28,
    #[doc = "29 - UART1 Transmit Done interrupt"]
    UART1_TD = 29,
    #[doc = "30 - UART1 Recieve interrupt"]
    UART1_RX = 30,
    #[doc = "31 - UART1 Transmit interrupt"]
    UART1_TX = 31,
    #[doc = "32 - UART1 Error and Receive Timeout interrupt"]
    UART1_E_RT = 32,
    #[doc = "33 - SPI RX FIFO overrun and Receive Timeout interrupt"]
    SPI_RO_RT = 33,
    #[doc = "34 - SPI Receive interrupt"]
    SPI_RX = 34,
    #[doc = "35 - SPI Transmit interrupt"]
    SPI_TX = 35,
    #[doc = "36 - I2C interrupt"]
    I2C = 36,
    #[doc = "37 - ECAP0 interrupt"]
    ECAP0 = 37,
    #[doc = "38 - ECAP1 interrupt"]
    ECAP1 = 38,
    #[doc = "39 - ECAP2 interrupt"]
    ECAP2 = 39,
    #[doc = "40 - PWM0 interrupt"]
    PWM0 = 40,
    #[doc = "41 - PWM0 HD interrupt"]
    PWM0_HD = 41,
    #[doc = "42 - PWM0 TZ interrupt"]
    PWM0_TZ = 42,
    #[doc = "43 - PWM1 interrupt"]
    PWM1 = 43,
    #[doc = "44 - PWM1 HD interrupt"]
    PWM1_HD = 44,
    #[doc = "45 - PWM1 TZ interrupt"]
    PWM1_TZ = 45,
    #[doc = "46 - PWM2 interrupt"]
    PWM2 = 46,
    #[doc = "47 - PWM2 HD interrupt"]
    PWM2_HD = 47,
    #[doc = "48 - PWM2 TZ interrupt"]
    PWM2_TZ = 48,
    #[doc = "49 - QEP interrupt"]
    QEP = 49,
    #[doc = "50 - ADC Sequencer 0 interrupt"]
    ADC_SEQ0 = 50,
    #[doc = "51 - ADC Sequencer 1 interrupt"]
    ADC_SEQ1 = 51,
    #[doc = "52 - ADC Digital Comparator interrupt"]
    ADC_DC = 52,
    #[doc = "53 - CAN0 interrupt"]
    CAN0 = 53,
    #[doc = "54 - CAN1 interrupt"]
    CAN1 = 54,
    #[doc = "55 - CAN2 interrupt"]
    CAN2 = 55,
    #[doc = "56 - CAN3 interrupt"]
    CAN3 = 56,
    #[doc = "57 - CAN4 interrupt"]
    CAN4 = 57,
    #[doc = "58 - CAN5 interrupt"]
    CAN5 = 58,
    #[doc = "59 - CAN6 interrupt"]
    CAN6 = 59,
    #[doc = "60 - CAN7 interrupt"]
    CAN7 = 60,
    #[doc = "61 - CAN8 interrupt"]
    CAN8 = 61,
    #[doc = "62 - CAN9 interrupt"]
    CAN9 = 62,
    #[doc = "63 - CAN10 interrupt"]
    CAN10 = 63,
    #[doc = "64 - CAN11 interrupt"]
    CAN11 = 64,
    #[doc = "65 - CAN12 interrupt"]
    CAN12 = 65,
    #[doc = "66 - CAN13 interrupt"]
    CAN13 = 66,
    #[doc = "67 - CAN14 interrupt"]
    CAN14 = 67,
    #[doc = "68 - CAN15 interrupt"]
    CAN15 = 68,
    #[doc = "69 - FPU exception interrupt"]
    FPU = 69,
}
unsafe impl cortex_m::interrupt::InterruptNumber for Interrupt {
    #[inline(always)]
    fn number(self) -> u16 {
        self as u16
    }
}
#[doc = "System integration unit registers"]
pub struct Siu {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Siu {}
impl Siu {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const siu::RegisterBlock = 0x4004_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const siu::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Siu {
    type Target = siu::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Siu {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Siu").finish()
    }
}
#[doc = "System integration unit registers"]
pub mod siu;
#[doc = "Reset and clock unit registers"]
pub struct Rcu {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Rcu {}
impl Rcu {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const rcu::RegisterBlock = 0x4004_1000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const rcu::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Rcu {
    type Target = rcu::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Rcu {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Rcu").finish()
    }
}
#[doc = "Reset and clock unit registers"]
pub mod rcu;
#[doc = "Power management unit registers"]
pub struct Pmu {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Pmu {}
impl Pmu {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const pmu::RegisterBlock = 0x4004_2000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const pmu::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Pmu {
    type Target = pmu::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Pmu {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Pmu").finish()
    }
}
#[doc = "Power management unit registers"]
pub mod pmu;
#[doc = "Watchdog control registers"]
pub struct Wdt {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Wdt {}
impl Wdt {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const wdt::RegisterBlock = 0x4004_3000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const wdt::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Wdt {
    type Target = wdt::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Wdt {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Wdt").finish()
    }
}
#[doc = "Watchdog control registers"]
pub mod wdt;
#[doc = "TMR controller registers"]
pub struct Tmr0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Tmr0 {}
impl Tmr0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const tmr0::RegisterBlock = 0x4004_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const tmr0::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Tmr0 {
    type Target = tmr0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Tmr0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tmr0").finish()
    }
}
#[doc = "TMR controller registers"]
pub mod tmr0;
#[doc = "TMR controller registers"]
pub struct Tmr1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Tmr1 {}
impl Tmr1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const tmr0::RegisterBlock = 0x4004_9000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const tmr0::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Tmr1 {
    type Target = tmr0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Tmr1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tmr1").finish()
    }
}
#[doc = "TMR controller registers"]
pub use self::tmr0 as tmr1;
#[doc = "TMR controller registers"]
pub struct Tmr2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Tmr2 {}
impl Tmr2 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const tmr0::RegisterBlock = 0x4004_a000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const tmr0::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Tmr2 {
    type Target = tmr0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Tmr2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tmr2").finish()
    }
}
#[doc = "TMR controller registers"]
pub use self::tmr0 as tmr2;
#[doc = "TMR controller registers"]
pub struct Tmr3 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Tmr3 {}
impl Tmr3 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const tmr0::RegisterBlock = 0x4004_b000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const tmr0::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Tmr3 {
    type Target = tmr0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Tmr3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tmr3").finish()
    }
}
#[doc = "TMR controller registers"]
pub use self::tmr0 as tmr3;
#[doc = "ADC control registers"]
pub struct Adc {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Adc {}
impl Adc {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const adc::RegisterBlock = 0x4000_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const adc::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Adc {
    type Target = adc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Adc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Adc").finish()
    }
}
#[doc = "ADC control registers"]
pub mod adc;
#[doc = "GPIO control registers"]
pub struct Gpioa {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Gpioa {}
impl Gpioa {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const gpioa::RegisterBlock = 0x4001_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const gpioa::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Gpioa {
    type Target = gpioa::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Gpioa {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpioa").finish()
    }
}
#[doc = "GPIO control registers"]
pub mod gpioa;
#[doc = "GPIO control registers"]
pub struct Gpiob {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Gpiob {}
impl Gpiob {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const gpioa::RegisterBlock = 0x4001_1000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const gpioa::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Gpiob {
    type Target = gpioa::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Gpiob {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpiob").finish()
    }
}
#[doc = "GPIO control registers"]
pub use self::gpioa as gpiob;
#[doc = "UART control registers"]
pub struct Uart0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Uart0 {}
impl Uart0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const uart0::RegisterBlock = 0x4004_5000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const uart0::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Uart0 {
    type Target = uart0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Uart0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Uart0").finish()
    }
}
#[doc = "UART control registers"]
pub mod uart0;
#[doc = "UART control registers"]
pub struct Uart1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Uart1 {}
impl Uart1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const uart0::RegisterBlock = 0x4004_6000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const uart0::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Uart1 {
    type Target = uart0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Uart1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Uart1").finish()
    }
}
#[doc = "UART control registers"]
pub use self::uart0 as uart1;
#[doc = "DMA control registers"]
pub struct Dma {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Dma {}
impl Dma {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const dma::RegisterBlock = 0x4004_4000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const dma::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Dma {
    type Target = dma::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Dma {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dma").finish()
    }
}
#[doc = "DMA control registers"]
pub mod dma;
#[doc = "Mainflash control registers"]
pub struct Mflash {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Mflash {}
impl Mflash {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const mflash::RegisterBlock = 0x4003_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const mflash::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Mflash {
    type Target = mflash::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Mflash {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Mflash").finish()
    }
}
#[doc = "Mainflash control registers"]
pub mod mflash;
#[doc = "QEP controller registers"]
pub struct Qep {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Qep {}
impl Qep {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const qep::RegisterBlock = 0x4004_f000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const qep::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Qep {
    type Target = qep::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Qep {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Qep").finish()
    }
}
#[doc = "QEP controller registers"]
pub mod qep;
#[doc = "ECAP controller registers"]
pub struct Ecap0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Ecap0 {}
impl Ecap0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const ecap0::RegisterBlock = 0x4005_1000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const ecap0::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Ecap0 {
    type Target = ecap0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Ecap0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Ecap0").finish()
    }
}
#[doc = "ECAP controller registers"]
pub mod ecap0;
#[doc = "ECAP controller registers"]
pub struct Ecap1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Ecap1 {}
impl Ecap1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const ecap0::RegisterBlock = 0x4005_2000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const ecap0::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Ecap1 {
    type Target = ecap0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Ecap1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Ecap1").finish()
    }
}
#[doc = "ECAP controller registers"]
pub use self::ecap0 as ecap1;
#[doc = "ECAP controller registers"]
pub struct Ecap2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Ecap2 {}
impl Ecap2 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const ecap0::RegisterBlock = 0x4005_3000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const ecap0::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Ecap2 {
    type Target = ecap0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Ecap2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Ecap2").finish()
    }
}
#[doc = "ECAP controller registers"]
pub use self::ecap0 as ecap2;
#[doc = "PWM controller registers"]
pub struct Pwm0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Pwm0 {}
impl Pwm0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const pwm0::RegisterBlock = 0x4004_c000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const pwm0::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Pwm0 {
    type Target = pwm0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Pwm0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Pwm0").finish()
    }
}
#[doc = "PWM controller registers"]
pub mod pwm0;
#[doc = "PWM controller registers"]
pub struct Pwm1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Pwm1 {}
impl Pwm1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const pwm0::RegisterBlock = 0x4004_d000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const pwm0::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Pwm1 {
    type Target = pwm0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Pwm1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Pwm1").finish()
    }
}
#[doc = "PWM controller registers"]
pub use self::pwm0 as pwm1;
#[doc = "PWM controller registers"]
pub struct Pwm2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Pwm2 {}
impl Pwm2 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const pwm0::RegisterBlock = 0x4004_e000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const pwm0::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Pwm2 {
    type Target = pwm0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Pwm2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Pwm2").finish()
    }
}
#[doc = "PWM controller registers"]
pub use self::pwm0 as pwm2;
#[doc = "SPI control registers"]
pub struct Spi {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Spi {}
impl Spi {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const spi::RegisterBlock = 0x4004_7000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const spi::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Spi {
    type Target = spi::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Spi {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Spi").finish()
    }
}
#[doc = "SPI control registers"]
pub mod spi;
#[doc = "I2C controller registers"]
pub struct I2c {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for I2c {}
impl I2c {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const i2c::RegisterBlock = 0x4005_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const i2c::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for I2c {
    type Target = i2c::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for I2c {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2c").finish()
    }
}
#[doc = "I2C controller registers"]
pub mod i2c;
#[doc = "CAN controller registers"]
pub struct Can {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Can {}
impl Can {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const can::RegisterBlock = 0x4002_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const can::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Can {
    type Target = can::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Can {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Can").finish()
    }
}
#[doc = "CAN controller registers"]
pub mod can;
#[doc = "CAN Msg registers"]
pub struct Canmsg {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Canmsg {}
impl Canmsg {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const canmsg::RegisterBlock = 0x4002_1000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const canmsg::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Canmsg {
    type Target = canmsg::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Canmsg {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Canmsg").finish()
    }
}
#[doc = "CAN Msg registers"]
pub mod canmsg;
#[no_mangle]
static mut DEVICE_PERIPHERALS: bool = false;
#[doc = r" All the peripherals."]
#[allow(non_snake_case)]
pub struct Peripherals {
    #[doc = "SIU"]
    pub siu: Siu,
    #[doc = "RCU"]
    pub rcu: Rcu,
    #[doc = "PMU"]
    pub pmu: Pmu,
    #[doc = "WDT"]
    pub wdt: Wdt,
    #[doc = "TMR0"]
    pub tmr0: Tmr0,
    #[doc = "TMR1"]
    pub tmr1: Tmr1,
    #[doc = "TMR2"]
    pub tmr2: Tmr2,
    #[doc = "TMR3"]
    pub tmr3: Tmr3,
    #[doc = "ADC"]
    pub adc: Adc,
    #[doc = "GPIOA"]
    pub gpioa: Gpioa,
    #[doc = "GPIOB"]
    pub gpiob: Gpiob,
    #[doc = "UART0"]
    pub uart0: Uart0,
    #[doc = "UART1"]
    pub uart1: Uart1,
    #[doc = "DMA"]
    pub dma: Dma,
    #[doc = "MFLASH"]
    pub mflash: Mflash,
    #[doc = "QEP"]
    pub qep: Qep,
    #[doc = "ECAP0"]
    pub ecap0: Ecap0,
    #[doc = "ECAP1"]
    pub ecap1: Ecap1,
    #[doc = "ECAP2"]
    pub ecap2: Ecap2,
    #[doc = "PWM0"]
    pub pwm0: Pwm0,
    #[doc = "PWM1"]
    pub pwm1: Pwm1,
    #[doc = "PWM2"]
    pub pwm2: Pwm2,
    #[doc = "SPI"]
    pub spi: Spi,
    #[doc = "I2C"]
    pub i2c: I2c,
    #[doc = "CAN"]
    pub can: Can,
    #[doc = "CANMSG"]
    pub canmsg: Canmsg,
}
impl Peripherals {
    #[doc = r" Returns all the peripherals *once*."]
    #[cfg(feature = "critical-section")]
    #[inline]
    pub fn take() -> Option<Self> {
        critical_section::with(|_| {
            if unsafe { DEVICE_PERIPHERALS } {
                return None;
            }
            Some(unsafe { Peripherals::steal() })
        })
    }
    #[doc = r" Unchecked version of `Peripherals::take`."]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Each of the returned peripherals must be used at most once."]
    #[inline]
    pub unsafe fn steal() -> Self {
        DEVICE_PERIPHERALS = true;
        Peripherals {
            siu: Siu {
                _marker: PhantomData,
            },
            rcu: Rcu {
                _marker: PhantomData,
            },
            pmu: Pmu {
                _marker: PhantomData,
            },
            wdt: Wdt {
                _marker: PhantomData,
            },
            tmr0: Tmr0 {
                _marker: PhantomData,
            },
            tmr1: Tmr1 {
                _marker: PhantomData,
            },
            tmr2: Tmr2 {
                _marker: PhantomData,
            },
            tmr3: Tmr3 {
                _marker: PhantomData,
            },
            adc: Adc {
                _marker: PhantomData,
            },
            gpioa: Gpioa {
                _marker: PhantomData,
            },
            gpiob: Gpiob {
                _marker: PhantomData,
            },
            uart0: Uart0 {
                _marker: PhantomData,
            },
            uart1: Uart1 {
                _marker: PhantomData,
            },
            dma: Dma {
                _marker: PhantomData,
            },
            mflash: Mflash {
                _marker: PhantomData,
            },
            qep: Qep {
                _marker: PhantomData,
            },
            ecap0: Ecap0 {
                _marker: PhantomData,
            },
            ecap1: Ecap1 {
                _marker: PhantomData,
            },
            ecap2: Ecap2 {
                _marker: PhantomData,
            },
            pwm0: Pwm0 {
                _marker: PhantomData,
            },
            pwm1: Pwm1 {
                _marker: PhantomData,
            },
            pwm2: Pwm2 {
                _marker: PhantomData,
            },
            spi: Spi {
                _marker: PhantomData,
            },
            i2c: I2c {
                _marker: PhantomData,
            },
            can: Can {
                _marker: PhantomData,
            },
            canmsg: Canmsg {
                _marker: PhantomData,
            },
        }
    }
}
